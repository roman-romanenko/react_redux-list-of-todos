{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectedTodo","isSelected","id","visibleTodos","queryTodos","title","toLowerCase","includes","trim","completed","light","useCallback","text","regexp","RegExp","matchValue","match","split","map","symbol","index","array","length","matchSymbol","shift","className","hightlight","onClick","TodoFilter","onSubmit","event","preventDefault","value","onChange","e","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","Error","useEffect","userId","userFromServer","href","email","name","App","hasTodos","hasSelectedTodo","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b356deb.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\ntype Action = SetQueryAction | SetStatusAction;\n\nconst filterReducer = (state: State = initialState, action: Action) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype Action = SetTodosAction;\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useCallback } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nfunction hightlight(filter: string, text: string) {\n  if (!filter) {\n    return text;\n  }\n\n  const regexp = new RegExp(filter, 'ig');\n  const matchValue = text.match(regexp);\n\n  if (matchValue) {\n    return text.split(regexp).map((symbol, index, array) => {\n      if (index < array.length - 1) {\n        const matchSymbol = matchValue.shift();\n\n        return (\n          <>\n            {symbol}\n            <span className=\"hightlight\">{matchSymbol}</span>\n          </>\n        );\n      }\n\n      return symbol;\n    });\n  }\n\n  return text;\n}\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const isSelected = (todo: Todo) => selectedTodo?.id === todo.id;\n  const query = useAppSelector(state => state.filter.query);\n\n  const visibleTodos = useAppSelector(({ filter, todos }) => {\n    return todos.filter(todo => {\n      const queryTodos = todo.title.toLowerCase().includes(filter.query.trim().toLowerCase());\n\n      switch (filter.status) {\n        case 'all':\n          return queryTodos;\n        case 'active':\n          return queryTodos && !todo.completed;\n        case 'completed':\n          return queryTodos && todo.completed;\n        default:\n          return true;\n      }\n    });\n  });\n\n  const light = useCallback((text: string) => {\n    return hightlight(query, text);\n  }, [query]);\n\n  return (\n    <>\n      {visibleTodos.length === 0\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )\n        : (\n          <table className=\"table is-narrow is-fullwidth\">\n\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {visibleTodos.map(todo => (\n                <tr\n                  key={todo.id}\n                  data-cy=\"todo\"\n                  className=\"\"\n                >\n                  <td className=\"is-vcentered\">{todo.id}</td>\n                  <td className=\"is-vcentered\">\n                    {todo.completed\n            && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n                  </td>\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={todo.completed\n                      ? 'has-text-success'\n                      : 'has-text-danger'}\n                    >\n                      {light(todo.title)}\n                    </p>\n                  </td>\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => dispatch(\n                        actions.setTodo(todo),\n                      )}\n                    >\n                      <span className=\"icon\">\n                        <i className={isSelected(todo)\n                          ? 'far fa-eye-slash'\n                          : 'far fa-eye'}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(e) => (\n              dispatch(actions.setStatus(e.target.value as Status)))}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => dispatch(actions.setQuery(e.target.value))}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => dispatch(actions.setQuery(''))}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n\n  if (!todo) {\n    throw new Error('todo not selected');\n  }\n\n  useEffect(() => {\n    getUser(todo.userId)\n      .then(userFromServer => setUser(userFromServer));\n  }, [todo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {!user\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${todo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(actions.removeTodo())}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">{todo.title}</p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {todo.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n                <a href={`mailto:${user.email}`}>{user.name}</a>\n              </p>\n            </div>\n          </div>\n        )}\n\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const hasTodos = useAppSelector(state => state.todos.length > 0);\n  const hasSelectedTodo = useAppSelector(state => state.currentTodo !== null);\n\n  useEffect(() => {\n    getTodos()\n      .then(todos => dispatch(\n        actions.setTodos(todos),\n      ));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            {!hasTodos\n              ? <Loader />\n              : (\n                <>\n                  <h1 className=\"title\">Todos:</h1>\n                  <div className=\"block\">\n                    <TodoFilter />\n                  </div>\n                  <div className=\"block\">\n\n                    <TodoList />\n                  </div>\n                </>\n              )}\n\n          </div>\n        </div>\n      </div>\n      {hasSelectedTodo && <TodoModal />}\n\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}